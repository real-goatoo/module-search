{"version":3,"sources":["components/Module/index.js","components/SearchInput/index.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["Module","props","state","init","lastVersion","axios","get","this","name","then","response","packageVersions","data","packages","lastVersionNumber","Object","keys","map","version","semver","valid","filter","sort","rcompare","setState","getAdditionalData","composerRequireCommand","vendor","indexOf","Card","fluid","className","color","Content","Header","package","Meta","Description","description","Grid","Column","floated","width","Message","size","Popup","position","inverted","trigger","Button","circular","icon","onClick","navigator","clipboard","writeText","content","on","mouseLeaveDelay","extra","href","repository","target","Icon","url","Component","SearchInput","doSearch","Form","Field","Input","link","placeholder","type","onChange","e","value","List","getModules","nextPageLink","reset","search","responseModules","results","module","moduleVendorAndPackage","split","modules","concat","next","catch","error","console","log","switchListStyle","prevState","galleryStyle","columnButtonIcon","numberOfColumns","Container","Group","widths","textAlign","style","padding","divided","Row","columns","index","marginBottom","key","h1","marginTop","App","as","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.48b18421.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Module.scss'\nimport axios from 'axios';\nimport semver from 'semver';\nimport {Button, Card, Container, Grid, Icon, Message, Popup, Segment} from \"semantic-ui-react\";\n\nexport default class Module extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            init: false,\n            lastVersion: null\n        }\n    }\n\n    getAdditionalData() {\n        axios.get('https://repo.packagist.org/p/'+this.props.name+\".json\")\n            .then(response => {\n                const packageVersions = response.data.packages[this.props.name];\n                const lastVersionNumber = Object.keys(packageVersions)\n                    .map(version => semver.valid(version) ? version : version+'.0')\n                    .filter(version => semver.valid(version))\n                    .sort(semver.rcompare)[0];\n                this.setState(\n                    {\n                        init:true,\n                        lastVersion: packageVersions[lastVersionNumber]\n                    }\n                );\n            });\n    }\n\n    componentDidMount() {\n        this.getAdditionalData();\n    }\n\n\n\n    render() {\n        // this.getAdditionalData();\n        const { lastVersion } = this.state;\n        const approvedVendors = ['cqfdev'];\n        let composerRequireCommand = \"composer require \"+this.props.name;\n        if (lastVersion) {\n            composerRequireCommand = composerRequireCommand+\" ~\"+lastVersion.version;\n        }\n\n        let vendor = \"\";\n        if (this.props.vendor === \"thelia\") {\n            vendor = 'official';\n        }\n\n        if (approvedVendors.indexOf(this.props.vendor) !== -1) {\n            vendor = \"approved\";\n        }\n\n        return (\n            <Card fluid className=\"Module\" color={\"pink\"}>\n                <Card.Content>\n                    <Card.Header ><h2>{this.props.package}</h2></Card.Header>\n                    <Card.Meta>By {this.props.vendor}</Card.Meta>\n                    <Card.Description>\n                        {this.props.description}\n                        <Grid>\n                            <Grid.Column floated='left' width={14}>\n                                <Message size='small'>{composerRequireCommand}</Message>\n                            </Grid.Column>\n                                <Grid.Column floated='right' width={2}>\n                                    <Popup\n                                        position='top center'\n                                        inverted\n                                        trigger={<Button className={\"secondary\"} circular icon='clipboard' onClick={() => navigator.clipboard.writeText(composerRequireCommand)} />}\n                                        content={'Command copied!'}\n                                        on='click'\n                                        mouseLeaveDelay={500}\n                                    />\n                                </Grid.Column>\n                        </Grid>\n                    </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                        <a className=\"fluid ui button \" href={this.props.repository} target=\"_blank\">\n                            <Icon name='github'/> Github\n                        </a>\n                        <a className=\"fluid ui button \" href={this.props.url} target=\"_blank\">\n                            <Icon name='cube'/> Packagist\n                        </a>\n                    </div>\n                </Card.Content>\n            </Card>\n        )\n    }\n}","import React from 'react'\nimport {Icon, Input, Form} from \"semantic-ui-react\";\n\nconst SearchInput = ({doSearch}) => {\n    return (\n        <Form.Field>\n            <Input\n                size=\"huge\"\n                icon={<Icon name='search' inverted circular link />}\n                placeholder='Search your module here'\n                type=\"text\"\n                onChange={(e) => doSearch(e.target.value)}\n            />\n        </Form.Field>\n    );\n}\n\nexport default SearchInput;","import React, { Component } from 'react';\nimport Module from '../Module';\nimport axios from 'axios';\n\nimport './List.scss';\nimport SearchInput from \"../SearchInput\";\nimport {Button, Form, Container, Grid} from \"semantic-ui-react\";\n\n\nexport default class List extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modules: [],\n            search: \"\",\n            galleryStyle: true\n        }\n    }\n\n    getModules = (nextPageLink = null, reset = false) => {\n        const url = nextPageLink !== null ? nextPageLink : \"https://packagist.org/search.json?per_page=15&type=thelia-module&q=\"+this.state.search;\n\n        axios.get(url, {\n\n        })\n            .then(response => {\n                const responseModules = response.data.results.map(function (module) {\n                    const moduleVendorAndPackage = module.name.split('/');\n                    return {\n                        vendor:moduleVendorAndPackage[0],\n                        package:moduleVendorAndPackage[1],\n                        ...module\n                    };\n                });\n\n                let modules = reset ? responseModules : this.state.modules.concat(responseModules);\n                // handle success\n                this.setState({\n                    modules: modules,\n                    nextPageLink: response.data.next ?? null\n                });\n            })\n            .catch(error => {\n                // handle error\n                console.log(error);\n            })\n    }\n\n    doSearch = (search) => {\n        this.setState({\n            search: search\n        }, () => {\n            this.getModules(null, true);\n        })\n    }\n\n    switchListStyle = () => {\n        this.setState((prevState, props) => {\n            return {galleryStyle: !prevState.galleryStyle};\n        });\n    }\n\n    componentDidMount() {\n        this.getModules();\n    }\n\n    render() {\n        const { modules, nextPageLink, galleryStyle } = this.state;\n        const columnButtonIcon = galleryStyle ? 'th list' : 'th';\n        const numberOfColumns = galleryStyle ? 3 : 1;\n\n        return (\n            <div>\n                <Container>\n                    <Form>\n                        <Form.Group widths='equal'>\n                            <SearchInput doSearch={this.doSearch} textAlign='center'/>\n                            <Button onClick={() => {this.switchListStyle()}} icon={columnButtonIcon}  className={\"large secondary\"}/>\n                        </Form.Group>\n                    </Form>\n                </Container>\n                <Container fluid={galleryStyle} className=\"List\" style={{ padding: 40 }}>\n                    <Grid divided=\"vertically\">\n                        <Grid.Row columns={numberOfColumns} >\n                            {modules.map((module, index) => <Grid.Column style={{ marginBottom: 40 }} key={module.package}><Module {...module} /></Grid.Column>)}\n                        </Grid.Row>\n                    </Grid>\n                </Container>\n                <Container textAlign='center' style={{marginBottom:\"1em\"}}>\n                    {nextPageLink !== null ? <Button className={\"secondary\"}  content=\"See more\" onClick={() => {this.getModules(nextPageLink)}}/> : null}\n                </Container>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport List from './components/List';\nimport './App.css';\n// import 'semantic-ui-css/semantic.min.css'\nimport {\n    Header,\n} from 'semantic-ui-react'\n\nconst style = {\n    h1: {\n        marginTop: '1em',\n    }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header as='h1' content='Thelia modules' style={style.h1} textAlign='center' />\n        <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-less/semantic.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}