{"version":3,"sources":["components/Abandoned/index.js","components/Module/index.js","components/SearchInput/index.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["Abandoned","link","this","props","package","className","Icon","name","color","size","href","Component","Module","state","init","lastVersion","axios","get","then","response","packageVersions","data","packages","lastVersionNumber","Object","keys","map","version","semver","valid","filter","sort","rcompare","setState","getAdditionalData","composerRequireCommand","Card","fluid","Content","Header","Meta","vendor","Description","description","hasOwnProperty","abandoned","Grid","Column","floated","width","Message","Popup","position","trigger","Button","circular","icon","onClick","navigator","clipboard","writeText","content","on","mouseLeaveDelay","extra","repository","target","url","SearchInput","searchInput","focus","doSearch","Form","Field","Input","ref","input","inverted","placeholder","value","defaulValue","type","onChange","e","List","getModules","nextPageLink","reset","search","responseModules","results","module","moduleVendorAndPackage","split","modules","concat","next","catch","error","console","log","window","history","pushState","switchListStyle","prevState","galleryStyle","urlParams","URLSearchParams","location","columnButtonIcon","numberOfColumns","Container","Group","widths","textAlign","style","padding","divided","Row","columns","index","marginBottom","key","h1","marginTop","App","as","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"sdAIqBA,G,8KAEb,IAAMC,EAAO,oBAAoBC,KAAKC,MAAMC,QAC5C,OACI,yBAAKC,UAAU,aACX,kBAACC,EAAA,EAAD,CAAMC,KAAK,qBAAqBC,MAAM,UAAUC,KAAK,UADzD,yCAE0C,uBAAGC,KAAMT,GAAOC,KAAKC,MAAMC,SAFrE,gB,GAJ2BO,cCGlBC,E,kDACjB,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IAEDU,MAAQ,CACTC,MAAM,EACNC,YAAa,MALF,E,gEASE,IAAD,OAChBC,IAAMC,IAAI,gCAAgCf,KAAKC,MAAMI,KAAK,SACrDW,MAAK,SAAAC,GACF,IAAMC,EAAkBD,EAASE,KAAKC,SAAS,EAAKnB,MAAMI,MACpDgB,EAAoBC,OAAOC,KAAKL,GACjCM,KAAI,SAAAC,GAAO,OAAIC,IAAOC,MAAMF,GAAWA,EAAUA,EAAQ,QACzDG,QAAO,SAAAH,GAAO,OAAIC,IAAOC,MAAMF,MAC/BI,KAAKH,IAAOI,UAAU,GAC3B,EAAKC,SACD,CACInB,MAAK,EACLC,YAAaK,EAAgBG,U,0CAO7CrB,KAAKgC,sB,+BAGC,IACEnB,EAAgBb,KAAKW,MAArBE,YACJoB,EAAyB,oBAAoBjC,KAAKC,MAAMI,KAK5D,OAJIQ,IACAoB,EAAyBA,EAAuB,KAAKpB,EAAYY,SAIjE,kBAACS,EAAA,EAAD,CAAMC,OAAK,EAAChC,UAAU,SAASG,MAAO,QAClC,kBAAC4B,EAAA,EAAKE,QAAN,KACI,kBAACF,EAAA,EAAKG,OAAN,KAAc,4BAAKrC,KAAKC,MAAMC,UAC9B,kBAACgC,EAAA,EAAKI,KAAN,WAAetC,KAAKC,MAAMsC,QAC1B,kBAACL,EAAA,EAAKM,YAAN,KACI,2BAAIxC,KAAKC,MAAMwC,aACdzC,KAAKC,MAAMyC,eAAe,aAAe,kBAAC,EAAD,CAAWxC,QAASF,KAAKC,MAAM0C,YAAgB,KACzF,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,IAC/B,kBAACC,EAAA,EAAD,CAASzC,KAAK,SAAS0B,IAEvB,kBAACW,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAChC,kBAACE,EAAA,EAAD,CACIC,SAAS,aACTC,QAAS,kBAACC,EAAA,EAAD,CAAQjD,UAAW,YAAakD,UAAQ,EAACC,KAAK,YAAYC,QAAS,kBAAMC,UAAUC,UAAUC,UAAUzB,MAChH0B,QAAS,kBACTC,GAAG,QACHC,gBAAiB,UAMzC,kBAAC3B,EAAA,EAAKE,QAAN,CAAc0B,OAAK,GACf,yBAAK3D,UAAU,kBACX,uBAAGA,UAAU,mBAAmBK,KAAMR,KAAKC,MAAM8D,WAAYC,OAAO,UAChE,kBAAC5D,EAAA,EAAD,CAAMC,KAAK,WADf,WAGA,uBAAGF,UAAU,mBAAmBK,KAAMR,KAAKC,MAAMgE,IAAKD,OAAO,UACzD,kBAAC5D,EAAA,EAAD,CAAMC,KAAK,SADf,qB,GAnEYI,a,2BCJfyD,E,kLAEblE,KAAKmE,YAAYC,U,+BAGV,IAAD,OACAC,EAAWrE,KAAKC,MAAMoE,SAC5B,OACI,kBAACC,EAAA,EAAKC,MAAN,KACI,kBAACC,EAAA,EAAD,CACIC,IAAK,SAACC,GAAY,EAAKP,YAAcO,GACrCnE,KAAK,OACL+C,KAAM,kBAAClD,EAAA,EAAD,CAAMC,KAAK,SAASsE,UAAQ,EAACtB,UAAQ,EAACtD,MAAI,IAChD6E,YAAY,0BACZC,MAAO7E,KAAKC,MAAM6E,YAClBC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOZ,EAASY,EAAEjB,OAAOa,e,GAhBdpE,a,SCMpByE,E,kDACjB,WAAYjF,GAAQ,IAAD,8BACf,cAAMA,IASVkF,WAAa,WAAyC,IAAxCC,EAAuC,uDAAxB,KAAMC,EAAkB,wDAC3CpB,EAAuB,OAAjBmB,EAAwBA,EAAe,sEAAsE,EAAKzE,MAAM2E,OAEpIxE,IAAMC,IAAIkD,EAAK,IAGVjD,MAAK,SAAAC,GAAa,IAAD,EACRsE,EAAkBtE,EAASE,KAAKqE,QAAQhE,KAAI,SAAUiE,GACxD,IAAMC,EAAyBD,EAAOpF,KAAKsF,MAAM,KACjD,OAAO,aACHpD,OAAOmD,EAAuB,GAC9BxF,QAAQwF,EAAuB,IAC5BD,MAIPG,EAAUP,EAAQE,EAAkB,EAAK5E,MAAMiF,QAAQC,OAAON,GAElE,EAAKxD,SAAS,CACV6D,QAASA,EACTR,aAAY,UAAEnE,EAASE,KAAK2E,YAAhB,QAAwB,UAG3CC,OAAM,SAAAC,GAEHC,QAAQC,IAAIF,OAnCL,EAuCnB3B,SAAW,SAACiB,GACJ,OAASA,GACTa,OAAOC,QAAQC,UAAU,SAAU,yBAA2Bf,EAAQ,MAAMA,GAE5E,EAAKvD,SAAS,CACVuD,OAAQA,IACT,WACC,EAAKH,WAAW,MAAM,OAG1B,EAAKA,cAjDM,EAqDnBmB,gBAAkB,WACd,EAAKvE,UAAS,SAACwE,EAAWtG,GACtB,MAAO,CAACuG,cAAeD,EAAUC,kBApDrC,EAAK7F,MAAQ,CACTiF,QAAS,GACTN,OAAQ,GACRkB,cAAc,GANH,E,gEA4Df,IAAMC,EAAY,IAAIC,gBAAgBP,OAAOQ,SAASrB,QAClDA,EAA+B,MAAtBmB,EAAU1F,IAAI,KAAe0F,EAAU1F,IAAI,KAAO,KAE/Df,KAAKqE,SAASiB,K,+BAIR,IAAD,SAC2CtF,KAAKW,MAA7CiF,EADH,EACGA,QAASR,EADZ,EACYA,aAAcoB,EAD1B,EAC0BA,aACzBI,EAAmBJ,EAAe,UAAY,KAC9CK,EAAkBL,EAAe,EAAI,EAE3C,OACI,6BACI,kBAACM,EAAA,EAAD,KACI,kBAACxC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKyC,MAAN,CAAYC,OAAO,SACf,kBAAC,EAAD,CAAa3C,SAAUrE,KAAKqE,SAAU4C,UAAU,SAASnC,YAAa9E,KAAKW,MAAM2E,SACjF,kBAAClC,EAAA,EAAD,CAAQG,QAAS,WAAO,EAAK+C,mBAAoBhD,KAAMsD,EAAmBzG,UAAW,uBAIjG,kBAAC2G,EAAA,EAAD,CAAW3E,MAAOqE,EAAcrG,UAAU,OAAO+G,MAAO,CAAEC,QAAS,KAC/D,kBAACvE,EAAA,EAAD,CAAMwE,QAAQ,cACV,kBAACxE,EAAA,EAAKyE,IAAN,CAAUC,QAAST,GACdjB,EAAQpE,KAAI,SAACiE,EAAQ8B,GAAT,OAAmB,kBAAC3E,EAAA,EAAKC,OAAN,CAAaqE,MAAO,CAAEM,aAAc,IAAMC,IAAKhC,EAAOvF,SAAS,kBAAC,EAAWuF,UAIvH,kBAACqB,EAAA,EAAD,CAAWG,UAAU,SAASC,MAAO,CAACM,aAAa,QAC7B,OAAjBpC,EAAwB,kBAAChC,EAAA,EAAD,CAAQjD,UAAW,YAAcwD,QAAQ,WAAWJ,QAAS,WAAO,EAAK4B,WAAWC,MAAoB,W,GA3FnH3E,a,kBCD5ByG,EAAQ,CACVQ,GAAI,CACAC,UAAW,QAaJC,MATf,WACE,OACE,yBAAKzH,UAAU,OACX,kBAACkC,EAAA,EAAD,CAAQwF,GAAG,KAAKlE,QAAQ,iBAAiBuD,MAAOA,EAAMQ,GAAIT,UAAU,WACpE,kBAAC,EAAD,QCNYa,QACW,cAA7B3B,OAAOQ,SAASoB,UAEe,UAA7B5B,OAAOQ,SAASoB,UAEhB5B,OAAOQ,SAASoB,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmB7E,WACrBA,UAAU8E,cAAcC,MACrBvH,MAAK,SAAAwH,GACJA,EAAaC,gBAEd1C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0C,c","file":"static/js/main.c3351848.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {Icon} from \"semantic-ui-react\";\nimport './Abandoned.scss'\n\nexport default class Abandoned extends Component {\n    render() {\n        const link = \"/module-search?q=\"+this.props.package;\n        return (\n            <div className=\"Abandoned\">\n                <Icon name='exclamation circle' color='primary' size='large'/>\n                This package is abandoned, please use <a href={link}>{this.props.package}</a> instead\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Module.scss'\nimport axios from 'axios';\nimport semver from 'semver';\nimport {Button, Card, Grid, Icon, Message, Popup} from \"semantic-ui-react\";\nimport Abandoned from \"../Abandoned\";\n\nexport default class Module extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            init: false,\n            lastVersion: null\n        }\n    }\n\n    getAdditionalData() {\n        axios.get('https://repo.packagist.org/p/'+this.props.name+\".json\")\n            .then(response => {\n                const packageVersions = response.data.packages[this.props.name];\n                const lastVersionNumber = Object.keys(packageVersions)\n                    .map(version => semver.valid(version) ? version : version+'.0')\n                    .filter(version => semver.valid(version))\n                    .sort(semver.rcompare)[0];\n                this.setState(\n                    {\n                        init:true,\n                        lastVersion: packageVersions[lastVersionNumber]\n                    }\n                );\n            });\n    }\n\n    componentDidMount() {\n        this.getAdditionalData();\n    }\n\n    render() {\n        const { lastVersion } = this.state;\n        let composerRequireCommand = \"composer require \"+this.props.name;\n        if (lastVersion) {\n            composerRequireCommand = composerRequireCommand+\" ~\"+lastVersion.version;\n        }\n\n        return (\n            <Card fluid className=\"Module\" color={\"pink\"}>\n                <Card.Content>\n                    <Card.Header ><h2>{this.props.package}</h2></Card.Header>\n                    <Card.Meta>By {this.props.vendor}</Card.Meta>\n                    <Card.Description>\n                        <p>{this.props.description}</p>\n                        {this.props.hasOwnProperty(\"abandoned\") ? <Abandoned package={this.props.abandoned} /> : null}\n                        <Grid>\n                            <Grid.Column floated='left' width={14}>\n                                <Message size='small'>{composerRequireCommand}</Message>\n                            </Grid.Column>\n                                <Grid.Column floated='right' width={2}>\n                                    <Popup\n                                        position='top center'\n                                        trigger={<Button className={\"secondary\"} circular icon='clipboard' onClick={() => navigator.clipboard.writeText(composerRequireCommand)} />}\n                                        content={'Command copied!'}\n                                        on='click'\n                                        mouseLeaveDelay={500}\n                                    />\n                                </Grid.Column>\n                        </Grid>\n                    </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                        <a className=\"fluid ui button \" href={this.props.repository} target=\"_blank\">\n                            <Icon name='github'/> Github\n                        </a>\n                        <a className=\"fluid ui button \" href={this.props.url} target=\"_blank\">\n                            <Icon name='cube'/> Packagist\n                        </a>\n                    </div>\n                </Card.Content>\n            </Card>\n        )\n    }\n}","import React, { Component } from 'react'\nimport {Icon, Input, Form} from \"semantic-ui-react\";\n\nexport default class SearchInput extends Component {\n    componentDidMount(){\n        this.searchInput.focus();\n    }\n\n    render () {\n        const doSearch = this.props.doSearch;\n        return (\n            <Form.Field>\n                <Input\n                    ref={(input) => { this.searchInput = input; }}\n                    size=\"huge\"\n                    icon={<Icon name='search' inverted circular link />}\n                    placeholder='Search your module here'\n                    value={this.props.defaulValue}\n                    type=\"text\"\n                    onChange={(e) => doSearch(e.target.value)}\n                />\n            </Form.Field>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Module from '../Module';\nimport axios from 'axios';\n\nimport './List.scss';\nimport SearchInput from \"../SearchInput\";\nimport {Button, Form, Container, Grid} from \"semantic-ui-react\";\n\n\nexport default class List extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modules: [],\n            search: \"\",\n            galleryStyle: true\n        }\n    }\n\n    getModules = (nextPageLink = null, reset = false) => {\n        const url = nextPageLink !== null ? nextPageLink : \"https://packagist.org/search.json?per_page=15&type=thelia-module&q=\"+this.state.search;\n\n        axios.get(url, {\n\n        })\n            .then(response => {\n                const responseModules = response.data.results.map(function (module) {\n                    const moduleVendorAndPackage = module.name.split('/');\n                    return {\n                        vendor:moduleVendorAndPackage[0],\n                        package:moduleVendorAndPackage[1],\n                        ...module\n                    };\n                });\n\n                let modules = reset ? responseModules : this.state.modules.concat(responseModules);\n                // handle success\n                this.setState({\n                    modules: modules,\n                    nextPageLink: response.data.next ?? null\n                });\n            })\n            .catch(error => {\n                // handle error\n                console.log(error);\n            })\n    }\n\n    doSearch = (search) => {\n        if (null !== search) {\n            window.history.pushState('Search', 'Search Thelia modules ' + search, '?q='+search);\n\n            this.setState({\n                search: search\n            }, () => {\n                this.getModules(null, true);\n            })\n        } else {\n            this.getModules();\n        }\n    }\n\n    switchListStyle = () => {\n        this.setState((prevState, props) => {\n            return {galleryStyle: !prevState.galleryStyle};\n        });\n    }\n\n    componentDidMount() {\n        const urlParams = new URLSearchParams(window.location.search);\n        let search = urlParams.get('q') != null ? urlParams.get('q') : null;\n\n        this.doSearch(search);\n    }\n\n\n    render() {\n        const { modules, nextPageLink, galleryStyle } = this.state;\n        const columnButtonIcon = galleryStyle ? 'th list' : 'th';\n        const numberOfColumns = galleryStyle ? 3 : 1;\n\n        return (\n            <div>\n                <Container>\n                    <Form>\n                        <Form.Group widths='equal'>\n                            <SearchInput doSearch={this.doSearch} textAlign='center' defaulValue={this.state.search}/>\n                            <Button onClick={() => {this.switchListStyle()}} icon={columnButtonIcon}  className={\"large secondary\"}/>\n                        </Form.Group>\n                    </Form>\n                </Container>\n                <Container fluid={galleryStyle} className=\"List\" style={{ padding: 40 }}>\n                    <Grid divided=\"vertically\">\n                        <Grid.Row columns={numberOfColumns} >\n                            {modules.map((module, index) => <Grid.Column style={{ marginBottom: 40 }} key={module.package}><Module {...module} /></Grid.Column>)}\n                        </Grid.Row>\n                    </Grid>\n                </Container>\n                <Container textAlign='center' style={{marginBottom:\"1em\"}}>\n                    {nextPageLink !== null ? <Button className={\"secondary\"}  content=\"See more\" onClick={() => {this.getModules(nextPageLink)}}/> : null}\n                </Container>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport List from './components/List';\nimport './App.css';\n// import 'semantic-ui-css/semantic.min.css'\nimport {\n    Header,\n} from 'semantic-ui-react'\n\nconst style = {\n    h1: {\n        marginTop: '1em',\n    }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header as='h1' content='Thelia modules' style={style.h1} textAlign='center' />\n        <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-less/semantic.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}